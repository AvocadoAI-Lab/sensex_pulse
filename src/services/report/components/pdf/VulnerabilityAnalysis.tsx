import React from 'react';
import {StyleSheet, Text, View} from '@react-pdf/renderer';
import {GroupSummary} from '../../summary';
import type {Vulnerability} from '@/types/wql';

const styles = StyleSheet.create({
  // Remove header style since it's handled by Document.tsx
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 16,
    fontFamily: 'Helvetica-Bold',
    color: '#1e293b',
    marginBottom: 16,
  },
  vulnerabilityList: {
    gap: 16,
  },
  vulnerabilityItem: {
    padding: 16,
    borderRadius: 8,
    backgroundColor: '#ffffff',
    borderWidth: 1,
    borderColor: '#e2e8f0',
  },
  vulnerabilityHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  cveId: {
    fontSize: 13,
    fontFamily: 'Helvetica-Bold',
    color: '#1e293b',
  },
  severityBadge: {
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 12,
    fontSize: 10,
    fontFamily: 'Helvetica-Bold',
  },
  title: {
    fontSize: 12,
    fontFamily: 'Helvetica-Bold',
    color: '#334155',
    marginBottom: 8,
  },
  details: {
    fontSize: 11,
    fontFamily: 'Helvetica',
    color: '#64748b',
    marginBottom: 12,
    lineHeight: 1.4,
  },
  cvssContainer: {
    marginTop: 12,
    padding: 12,
    backgroundColor: '#f8fafc',
    borderRadius: 6,
    gap: 8,
  },
  cvssHeader: {
    fontSize: 11,
    fontFamily: 'Helvetica-Bold',
    color: '#475569',
    marginBottom: 4,
  },
  cvssScore: {
    fontSize: 20,
    fontFamily: 'Helvetica-Bold',
    color: '#1e293b',
  },
  cvssScoreContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  cvssScoreBar: {
    flex: 1,
    height: 4,
    backgroundColor: '#e2e8f0',
    borderRadius: 2,
    overflow: 'hidden',
  },
  cvssScoreProgress: {
    height: '100%',
    borderRadius: 2,
  },
  vectorGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 6,
    marginTop: 8,
  },
  vectorItem: {
    backgroundColor: '#e2e8f0',
    padding: 4,
    borderRadius: 4,
    fontSize: 9,
    fontFamily: 'Helvetica-Bold',
    color: '#475569',
  },
  packageInfo: {
    marginTop: 12,
    padding: 12,
    backgroundColor: '#f8fafc',
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#e2e8f0',
  },
  packageHeader: {
    fontSize: 11,
    fontFamily: 'Helvetica-Bold',
    color: '#475569',
    marginBottom: 8,
  },
  packageText: {
    fontSize: 11,
    fontFamily: 'Helvetica',
    color: '#475569',
    marginBottom: 2,
  },
  metaInfo: {
    marginTop: 8,
    flexDirection: 'row',
    gap: 16,
  },
  metaItem: {
    fontSize: 10,
    fontFamily: 'Helvetica',
    color: '#64748b',
  },
  noVulnerabilities: {
    fontSize: 13,
    fontFamily: 'Helvetica',
    color: '#64748b',
    fontStyle: 'italic',
    textAlign: 'center',
    marginTop: 16,
    padding: 16,
    backgroundColor: '#f8fafc',
    borderRadius: 8,
  },
  summaryBox: {
    marginBottom: 24,
    padding: 16,
    backgroundColor: '#f8fafc',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e2e8f0',
  },
  summaryText: {
    fontSize: 12,
    fontFamily: 'Helvetica',
    color: '#1e293b',
    lineHeight: 1.5,
  },
  summaryHighlight: {
    fontFamily: 'Helvetica-Bold',
    color: '#2563eb',
  },
  statsGrid: {
    flexDirection: 'row',
    gap: 16,
    marginBottom: 24,
  },
  statsCard: {
    flex: 1,
    padding: 16,
    backgroundColor: '#ffffff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e2e8f0',
  },
  statsValue: {
    fontSize: 20,
    fontFamily: 'Helvetica-Bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  statsLabel: {
    fontSize: 11,
    fontFamily: 'Helvetica',
    color: '#64748b',
  },
});

const getSeverityStyle = (severity: string) => {
  switch (severity.toLowerCase()) {
    case 'critical':
      return {
        backgroundColor: '#fee2e2',
        color: '#991b1b',
      };
    case 'high':
      return {
        backgroundColor: '#ffedd5',
        color: '#9a3412',
      };
    case 'medium':
      return {
        backgroundColor: '#fef3c7',
        color: '#92400e',
      };
    default:
      return {
        backgroundColor: '#f3f4f6',
        color: '#374151',
      };
  }
};

const getCvssColor = (score: string) => {
  const numScore = parseFloat(score);
  if (numScore >= 9.0) return '#dc2626';
  if (numScore >= 7.0) return '#ea580c';
  if (numScore >= 4.0) return '#d97706';
  return '#84cc16';
};

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

const VulnerabilityCard: React.FC<{ vulnerability: Vulnerability }> = ({ vulnerability }) => {
  const severityStyle = getSeverityStyle(vulnerability.severity);
  const cvss3 = vulnerability.cvss?.cvss3;
  const cvss2 = vulnerability.cvss?.cvss2;

  return (
    <View style={styles.vulnerabilityItem}>
      <View style={styles.vulnerabilityHeader}>
        <Text style={styles.cveId}>{vulnerability.cve}</Text>
        <Text style={[styles.severityBadge, severityStyle]}>
          {vulnerability.severity}
        </Text>
      </View>

      <Text style={styles.title}>{vulnerability.title}</Text>
      <Text style={styles.details}>{vulnerability.rationale}</Text>

      {(cvss3 || cvss2) && (
        <View style={styles.cvssContainer}>
          {cvss3 && (
            <>
              <Text style={styles.cvssHeader}>CVSS v3 Score</Text>
              <View style={styles.cvssScoreContainer}>
                <Text style={[styles.cvssScore, { color: getCvssColor(cvss3.base_score) }]}>
                  {cvss3.base_score}
                </Text>
                <View style={styles.cvssScoreBar}>
                  <View 
                    style={[
                      styles.cvssScoreProgress, 
                      { 
                        width: `${(parseFloat(cvss3.base_score) / 10) * 100}%`,
                        backgroundColor: getCvssColor(cvss3.base_score)
                      }
                    ]} 
                  />
                </View>
              </View>
              <View style={styles.vectorGrid}>
                {Object.entries(cvss3.vector).map(([key, value], index) => (
                  <Text key={index} style={styles.vectorItem}>
                    {key.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}: {value}
                  </Text>
                ))}
              </View>
            </>
          )}
          {!cvss3 && cvss2 && (
            <>
              <Text style={styles.cvssHeader}>CVSS v2 Score</Text>
              <View style={styles.cvssScoreContainer}>
                <Text style={[styles.cvssScore, { color: getCvssColor(cvss2.base_score) }]}>
                  {cvss2.base_score}
                </Text>
                <View style={styles.cvssScoreBar}>
                  <View 
                    style={[
                      styles.cvssScoreProgress, 
                      { 
                        width: `${(parseFloat(cvss2.base_score) / 10) * 100}%`,
                        backgroundColor: getCvssColor(cvss2.base_score)
                      }
                    ]} 
                  />
                </View>
              </View>
              <View style={styles.vectorGrid}>
                {Object.entries(cvss2.vector).map(([key, value], index) => (
                  <Text key={index} style={styles.vectorItem}>
                    {key.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}: {value}
                  </Text>
                ))}
              </View>
            </>
          )}
        </View>
      )}

      <View style={styles.packageInfo}>
        <Text style={styles.packageHeader}>Affected Package</Text>
        <Text style={styles.packageText}>
          {vulnerability.package.name} ({vulnerability.package.version})
        </Text>
        <Text style={styles.packageText}>
          Architecture: {vulnerability.package.architecture}
        </Text>
        <View style={styles.metaInfo}>
          <Text style={styles.metaItem}>Published: {formatDate(vulnerability.published)}</Text>
          <Text style={styles.metaItem}>Updated: {formatDate(vulnerability.updated)}</Text>
        </View>
      </View>
    </View>
  );
};

interface VulnerabilityAnalysisProps {
  summary: GroupSummary;
}

export const VulnerabilityAnalysis: React.FC<VulnerabilityAnalysisProps> = ({ summary }) => {
  const criticalVulnerabilities = summary.criticalVulnerabilities;
  const allVulnerabilities = summary.agentSummaries.flatMap(agent => 
    agent.vulnerabilities.filter(vuln => 
      !criticalVulnerabilities.some(critical => critical.cve === vuln.cve)
    )
  );

  const totalVulnerabilities = criticalVulnerabilities.length + allVulnerabilities.length;
  const criticalCount = criticalVulnerabilities.length;
  const highCount = allVulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length;
  const mediumCount = allVulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length;

  return (
    <>
      <View style={styles.summaryBox}>
        <Text style={styles.summaryText}>
          Detected <Text style={styles.summaryHighlight}>{totalVulnerabilities} vulnerabilities</Text> across all agents. 
          {criticalVulnerabilities.length > 0 && 
            ` Including ${criticalVulnerabilities.length} critical vulnerabilities that require immediate attention.`
          } This analysis includes CVSS scores, affected packages, and detailed vulnerability information to help 
          prioritize remediation efforts.
        </Text>
      </View>

      <View style={styles.statsGrid}>
        <View style={styles.statsCard}>
          <Text style={[styles.statsValue, { color: '#dc2626' }]}>{criticalCount}</Text>
          <Text style={styles.statsLabel}>Critical Vulnerabilities</Text>
        </View>
        <View style={styles.statsCard}>
          <Text style={[styles.statsValue, { color: '#ea580c' }]}>{highCount}</Text>
          <Text style={styles.statsLabel}>High Severity</Text>
        </View>
        <View style={styles.statsCard}>
          <Text style={[styles.statsValue, { color: '#d97706' }]}>{mediumCount}</Text>
          <Text style={styles.statsLabel}>Medium Severity</Text>
        </View>
      </View>

      {criticalVulnerabilities.length > 0 && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Critical Vulnerabilities</Text>
          <View style={styles.vulnerabilityList}>
            {criticalVulnerabilities.map((vulnerability, index) => (
              <VulnerabilityCard key={index} vulnerability={vulnerability} />
            ))}
          </View>
        </View>
      )}

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Other Vulnerabilities</Text>
        <View style={styles.vulnerabilityList}>
          {allVulnerabilities.length > 0 ? (
            allVulnerabilities.map((vulnerability, index) => (
              <VulnerabilityCard key={index} vulnerability={vulnerability} />
            ))
          ) : (
            <Text style={styles.noVulnerabilities}>
              No additional vulnerabilities detected
            </Text>
          )}
        </View>
      </View>
    </>
  );
};
