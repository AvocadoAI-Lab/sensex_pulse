import React from 'react';
import {StyleSheet, Text, View} from '@react-pdf/renderer';
import {GroupSummary} from '../../summary';
import type {Vulnerability} from '../../../../types/wql';

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    fontSize: 24,
    fontFamily: 'Helvetica-Bold',
    marginBottom: 32,
    color: '#1e293b',
  },
  section: {
    marginBottom: 32,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: 'Helvetica-Bold',
    color: '#1e293b',
    marginBottom: 24,
  },
  vulnerabilityList: {
    gap: 16,
  },
  vulnerabilityItem: {
    padding: 16,
    borderRadius: 8,
    backgroundColor: '#f8fafc',
  },
  vulnerabilityHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  cveId: {
    fontSize: 14,
    fontFamily: 'Helvetica-Bold',
    color: '#1e293b',
  },
  severityBadge: {
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 4,
    fontSize: 12,
    fontFamily: 'Helvetica',
  },
  title: {
    fontSize: 14,
    fontFamily: 'Helvetica',
    color: '#334155',
    marginBottom: 8,
  },
  details: {
    fontSize: 12,
    fontFamily: 'Helvetica',
    color: '#64748b',
    marginBottom: 4,
  },
  packageInfo: {
    marginTop: 12,
    padding: 12,
    backgroundColor: '#f1f5f9',
    borderRadius: 4,
  },
  packageText: {
    fontSize: 12,
    fontFamily: 'Helvetica',
    color: '#475569',
  },
  noVulnerabilities: {
    fontSize: 14,
    fontFamily: 'Helvetica',
    color: '#64748b',
    fontStyle: 'italic',
    textAlign: 'center',
    marginTop: 24,
  },
});

interface VulnerabilityAnalysisProps {
  summary: GroupSummary;
}

const getSeverityStyle = (severity: string) => {
  switch (severity.toLowerCase()) {
    case 'critical':
      return {
        backgroundColor: '#fee2e2',
        color: '#991b1b',
      };
    case 'high':
      return {
        backgroundColor: '#ffedd5',
        color: '#9a3412',
      };
    case 'medium':
      return {
        backgroundColor: '#fef3c7',
        color: '#92400e',
      };
    default:
      return {
        backgroundColor: '#f3f4f6',
        color: '#374151',
      };
  }
};

const VulnerabilityCard: React.FC<{ vulnerability: Vulnerability }> = ({ vulnerability }) => {
  const severityStyle = getSeverityStyle(vulnerability.severity);

  return (
    <View style={styles.vulnerabilityItem}>
      <View style={styles.vulnerabilityHeader}>
        <Text style={styles.cveId}>{vulnerability.cve}</Text>
        <Text style={[styles.severityBadge, severityStyle]}>
          {vulnerability.severity}
        </Text>
      </View>

      <Text style={styles.title}>{vulnerability.title}</Text>
      <Text style={styles.details}>{vulnerability.rationale}</Text>

      <View style={styles.packageInfo}>
        <Text style={styles.packageText}>
          Package: {vulnerability.package.name} ({vulnerability.package.version})
        </Text>
      </View>
    </View>
  );
};

export const VulnerabilityAnalysis: React.FC<VulnerabilityAnalysisProps> = ({ summary }) => {
  const criticalVulnerabilities = summary.criticalVulnerabilities;
  const allVulnerabilities = summary.agentSummaries.flatMap(agent => 
    agent.vulnerabilities.filter(vuln => 
      !criticalVulnerabilities.some(critical => critical.cve === vuln.cve)
    )
  );

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Vulnerability Analysis</Text>

      {criticalVulnerabilities.length > 0 && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Critical Vulnerabilities</Text>
          <View style={styles.vulnerabilityList}>
            {criticalVulnerabilities.map((vulnerability, index) => (
              <VulnerabilityCard key={index} vulnerability={vulnerability} />
            ))}
          </View>
        </View>
      )}

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Other Vulnerabilities</Text>
        <View style={styles.vulnerabilityList}>
          {allVulnerabilities.length > 0 ? (
            allVulnerabilities.map((vulnerability, index) => (
              <VulnerabilityCard key={index} vulnerability={vulnerability} />
            ))
          ) : (
            <Text style={styles.noVulnerabilities}>
              No additional vulnerabilities detected
            </Text>
          )}
        </View>
      </View>
    </View>
  );
};
