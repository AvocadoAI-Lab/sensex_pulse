import {GroupSummary} from '../summary';
import {Vulnerability} from '@/types/wql';

interface VulnerabilityMetrics {
    totalCount: number;
    criticalCount: number;
    highCount: number;
    mediumCount: number;
    lowCount: number;
    topPackages: Array<{ name: string; count: number }>;
}

function generateCircularProgress(value: number, max: number, color: string): string {
    const percentage = (value / max) * 100;
    return `
    <div style="position: relative; width: 100px; height: 100px;">
        <svg viewBox="0 0 36 36" style="transform: rotate(-90deg); width: 100px; height: 100px;">
            <path d="M18 2.0845
                a 15.9155 15.9155 0 0 1 0 31.831
                a 15.9155 15.9155 0 0 1 0 -31.831"
                fill="none"
                stroke="#e5e7eb"
                stroke-width="3"
            />
            <path d="M18 2.0845
                a 15.9155 15.9155 0 0 1 0 31.831
                a 15.9155 15.9155 0 0 1 0 -31.831"
                fill="none"
                stroke="${color}"
                stroke-width="3"
                stroke-dasharray="${percentage}, 100"
            />
        </svg>
        <div style="
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        ">
            <span style="font-size: 24px; font-weight: 700; color: #1f2937;">${value}</span>
        </div>
    </div>`;
}

function analyzeVulnerabilities(summary: GroupSummary): VulnerabilityMetrics {
    const allVulnerabilities = summary.agentSummaries.flatMap(agent => agent.vulnerabilities);
    const packageVulnCount = new Map<string, number>();

    allVulnerabilities.forEach(vuln => {
        const count = packageVulnCount.get(vuln.package.name) || 0;
        packageVulnCount.set(vuln.package.name, count + 1);
    });

    const topPackages = Array.from(packageVulnCount.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([name, count]) => ({ name, count }));

    return {
        totalCount: allVulnerabilities.length,
        criticalCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length,
        highCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length,
        mediumCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length,
        lowCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length,
        topPackages
    };
}

function generateVulnerabilityTable(vulnerabilities: Vulnerability[]): string {
    if (vulnerabilities.length === 0) {
        return `
        <div style="
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 48px;
            background: #f9fafb;
            border-radius: 12px;
            border: 2px dashed #e5e7eb;
            text-align: center;
        ">
            <div>
                <div style="
                    width: 64px;
                    height: 64px;
                    background: #d1fae5;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin: 0 auto 16px;
                ">
                    <svg style="width: 32px; height: 32px; color: #059669;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                </div>
                <h3 style="font-size: 18px; font-weight: 500; color: #111827; margin-bottom: 4px;">
                    No Critical Vulnerabilities
                </h3>
                <p style="color: #6b7280;">Your system is currently free of critical vulnerabilities.</p>
            </div>
        </div>`;
    }

    return `
    <div style="
        background: white;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
        overflow: hidden;
    ">
        <table style="width: 100%; border-collapse: collapse; text-align: left;">
            <thead style="background: #f9fafb;">
                <tr>
                    <th style="padding: 12px 24px; color: #6b7280; font-size: 12px; font-weight: 600; text-transform: uppercase;">CVE</th>
                    <th style="padding: 12px 24px; color: #6b7280; font-size: 12px; font-weight: 600; text-transform: uppercase;">Package</th>
                    <th style="padding: 12px 24px; color: #6b7280; font-size: 12px; font-weight: 600; text-transform: uppercase;">Severity</th>
                    <th style="padding: 12px 24px; color: #6b7280; font-size: 12px; font-weight: 600; text-transform: uppercase;">CVSS Score</th>
                </tr>
            </thead>
            <tbody>
                ${vulnerabilities.map((vuln, index) => {
                    const cvssScore = vuln.cvss.cvss3?.base_score || vuln.cvss.cvss2?.base_score;
                    const bgColor = index % 2 === 0 ? 'white' : '#f9fafb';
                    
                    return `
                    <tr style="background: ${bgColor};">
                        <td style="padding: 16px 24px;">
                            <div style="display: flex; align-items: center;">
                                <div style="
                                    width: 32px;
                                    height: 32px;
                                    background: #fee2e2;
                                    border-radius: 50%;
                                    display: flex;
                                    align-items: center;
                                    justify-content: center;
                                    margin-right: 12px;
                                ">
                                    <svg style="width: 16px; height: 16px; color: #dc2626;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                                    </svg>
                                </div>
                                <div>
                                    <div style="font-size: 14px; font-weight: 500; color: #2563eb;">${vuln.cve}</div>
                                    <div style="font-size: 12px; color: #6b7280;">${vuln.title.substring(0, 50)}${vuln.title.length > 50 ? '...' : ''}</div>
                                </div>
                            </div>
                        </td>
                        <td style="padding: 16px 24px;">
                            <div style="font-size: 14px; font-weight: 500; color: #111827;">${vuln.package.name}</div>
                            <div style="font-size: 12px; color: #6b7280;">${vuln.package.version}</div>
                        </td>
                        <td style="padding: 16px 24px;">
                            <span style="
                                padding: 4px 12px;
                                border-radius: 9999px;
                                font-size: 12px;
                                font-weight: 500;
                                ${vuln.severity.toLowerCase() === 'critical' ? 'background: #fee2e2; color: #991b1b;' :
                                vuln.severity.toLowerCase() === 'high' ? 'background: #ffedd5; color: #9a3412;' :
                                vuln.severity.toLowerCase() === 'medium' ? 'background: #fef3c7; color: #92400e;' :
                                'background: #ecfdf5; color: #065f46;'}
                            ">
                                ${vuln.severity}
                            </span>
                        </td>
                        <td style="padding: 16px 24px;">
                            <div style="display: flex; align-items: center;">
                                <span style="font-size: 14px; font-weight: 500; color: #111827; margin-right: 12px;">
                                    ${cvssScore || 'N/A'}
                                </span>
                                ${cvssScore ? `
                                <div style="
                                    flex-grow: 1;
                                    max-width: 100px;
                                    height: 4px;
                                    background: #e5e7eb;
                                    border-radius: 2px;
                                    overflow: hidden;
                                ">
                                    <div style="
                                        height: 100%;
                                        width: ${(Number(cvssScore) / 10) * 100}%;
                                        background: #2563eb;
                                        border-radius: 2px;
                                    "></div>
                                </div>` : ''}
                            </div>
                        </td>
                    </tr>`;
                }).join('')}
            </tbody>
        </table>
    </div>`;
}

function generateAffectedPackagesChart(metrics: VulnerabilityMetrics): string {
    const maxCount = Math.max(...metrics.topPackages.map(p => p.count));
    
    return `
    <div style="
        background: white;
        border-radius: 12px;
        padding: 24px;
        border: 1px solid #e5e7eb;
    ">
        <div style="
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
        ">
            <h4 style="font-size: 18px; font-weight: 500; color: #111827;">Most Affected Packages</h4>
            <div style="font-size: 14px; color: #6b7280;">
                ${metrics.topPackages.reduce((sum, pkg) => sum + pkg.count, 0)} total vulnerabilities
            </div>
        </div>
        <div style="display: flex; flex-direction: column; gap: 24px;">
            ${metrics.topPackages.map(pkg => `
            <div>
                <div style="
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    margin-bottom: 8px;
                ">
                    <div>
                        <span style="font-size: 14px; font-weight: 500; color: #111827;">${pkg.name}</span>
                        <span style="font-size: 14px; color: #6b7280; margin-left: 8px;">${pkg.count} vulnerabilities</span>
                    </div>
                    <span style="font-size: 14px; font-weight: 500; color: #111827;">
                        ${Math.round((pkg.count / maxCount) * 100)}%
                    </span>
                </div>
                <div style="
                    height: 8px;
                    background: #e5e7eb;
                    border-radius: 4px;
                    overflow: hidden;
                ">
                    <div style="
                        height: 100%;
                        width: ${(pkg.count / maxCount) * 100}%;
                        background: linear-gradient(90deg, #2563eb, #1d4ed8);
                        border-radius: 4px;
                    "></div>
                </div>
            </div>
            `).join('')}
        </div>
    </div>`;
}

export function generateVulnerabilityAnalysis(summary: GroupSummary): string {
    const metrics = analyzeVulnerabilities(summary);
    
    return `
    <div style="padding: 48px; height: 100%; background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);">
        <div style="max-width: 800px; margin: 0 auto;">
            <!-- Header -->
            <div style="display: flex; align-items: center; margin-bottom: 48px;">
                <div style="
                    width: 48px;
                    height: 48px;
                    border-radius: 12px;
                    background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-right: 16px;
                ">
                    <svg style="width: 24px; height: 24px; color: white;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                    </svg>
                </div>
                <h2 style="font-size: 32px; font-weight: 700; color: #1f2937;">Vulnerability Analysis</h2>
            </div>

            <!-- Metrics Grid -->
            <div style="
                display: grid;
                grid-template-columns: repeat(4, 1fr);
                gap: 24px;
                margin-bottom: 48px;
            ">
                <div style="
                    background: white;
                    border-radius: 12px;
                    padding: 24px;
                    border: 1px solid #e5e7eb;
                ">
                    <h3 style="font-size: 14px; font-weight: 500; color: #6b7280; margin-bottom: 16px;">Total</h3>
                    ${generateCircularProgress(metrics.totalCount, metrics.totalCount, '#2563eb')}
                    <p style="font-size: 14px; color: #6b7280; margin-top: 8px;">All vulnerabilities</p>
                </div>

                <div style="
                    background: white;
                    border-radius: 12px;
                    padding: 24px;
                    border: 1px solid #fecaca;
                ">
                    <h3 style="font-size: 14px; font-weight: 500; color: #dc2626; margin-bottom: 16px;">Critical</h3>
                    ${generateCircularProgress(metrics.criticalCount, metrics.totalCount, '#dc2626')}
                    <p style="font-size: 14px; color: #6b7280; margin-top: 8px;">Immediate action needed</p>
                </div>

                <div style="
                    background: white;
                    border-radius: 12px;
                    padding: 24px;
                    border: 1px solid #fed7aa;
                ">
                    <h3 style="font-size: 14px; font-weight: 500; color: #ea580c; margin-bottom: 16px;">High</h3>
                    ${generateCircularProgress(metrics.highCount, metrics.totalCount, '#ea580c')}
                    <p style="font-size: 14px; color: #6b7280; margin-top: 8px;">High priority fixes</p>
                </div>

                <div style="
                    background: white;
                    border-radius: 12px;
                    padding: 24px;
                    border: 1px solid #fef08a;
                ">
                    <h3 style="font-size: 14px; font-weight: 500; color: #ca8a04; margin-bottom: 16px;">Medium</h3>
                    ${generateCircularProgress(metrics.mediumCount, metrics.totalCount, '#ca8a04')}
                    <p style="font-size: 14px; color: #6b7280; margin-top: 8px;">Moderate risk level</p>
                </div>
            </div>

            ${generateAffectedPackagesChart(metrics)}

            <div style="margin-top: 48px;">
                <h3 style="font-size: 24px; font-weight: 600; color: #1f2937; margin-bottom: 24px;">
                    Critical Vulnerabilities
                </h3>
                ${generateVulnerabilityTable(summary.criticalVulnerabilities)}
            </div>
        </div>
    </div>`;
}
