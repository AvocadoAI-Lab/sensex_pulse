import {GroupSummary} from '../summary';
import {Vulnerability} from '@/types/wql';

interface VulnerabilityMetrics {
    totalCount: number;
    criticalCount: number;
    highCount: number;
    mediumCount: number;
    lowCount: number;
    topPackages: Array<{ name: string; count: number }>;
}

function analyzeVulnerabilities(summary: GroupSummary): VulnerabilityMetrics {
    const allVulnerabilities = summary.agentSummaries.flatMap(agent => agent.vulnerabilities);
    const packageVulnCount = new Map<string, number>();

    allVulnerabilities.forEach(vuln => {
        const count = packageVulnCount.get(vuln.package.name) || 0;
        packageVulnCount.set(vuln.package.name, count + 1);
    });

    const topPackages = Array.from(packageVulnCount.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([name, count]) => ({ name, count }));

    return {
        totalCount: allVulnerabilities.length,
        criticalCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length,
        highCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length,
        mediumCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'medium').length,
        lowCount: allVulnerabilities.filter(v => v.severity.toLowerCase() === 'low').length,
        topPackages
    };
}

function generateMetricsGrid(metrics: VulnerabilityMetrics): string {
    const metricBoxStyle = `
        background: white;
        padding: 16px;
        border-radius: 8px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        width: 180px;
    `;

    const titleStyle = `
        color: #4B5563;
        font-size: 12px;
        font-weight: normal;
        margin-bottom: 8px;
    `;

    const valueStyle = `
        font-size: 32px;
        font-weight: 500;
        margin: 8px 0;
        line-height: 1;
    `;

    const subtextStyle = `
        color: #4B5563;
        font-size: 12px;
        font-weight: normal;
    `;

    return `
    <div style="display: flex; gap: 16px; margin-bottom: 32px;">
        <div style="${metricBoxStyle}">
            <div style="${titleStyle}">TOTAL VULNERABILITIES</div>
            <div style="${valueStyle}">${metrics.totalCount}</div>
            <div style="${subtextStyle}">All Issues</div>
        </div>

        <div style="${metricBoxStyle}">
            <div style="${titleStyle}">CRITICAL</div>
            <div style="${valueStyle}; color: #DC2626;">${metrics.criticalCount}</div>
            <div style="${subtextStyle}">Critical Issues</div>
        </div>

        <div style="${metricBoxStyle}">
            <div style="${titleStyle}">HIGH</div>
            <div style="${valueStyle}; color: #EA580C;">${metrics.highCount}</div>
            <div style="${subtextStyle}">High Issues</div>
        </div>

        <div style="${metricBoxStyle}">
            <div style="${titleStyle}">MEDIUM</div>
            <div style="${valueStyle}">${metrics.mediumCount}</div>
            <div style="${subtextStyle}">Medium Issues</div>
        </div>
    </div>`;
}

function generateAffectedPackages(metrics: VulnerabilityMetrics): string {
    return `
    <h3 style="margin: 30px 0 20px; color: #1F2937;">Most Affected Packages</h3>
    ${metrics.topPackages.map(pkg => 
        `<div style="padding: 12px 0; border-bottom: 1px solid #E5E7EB;">
            ${pkg.name} ${pkg.count} vulnerabilities
        </div>`
    ).join('')}`;
}

function generateVulnerabilityTable(vulnerabilities: Vulnerability[]): string {
    if (vulnerabilities.length === 0) {
        return `<div style="text-align: center; padding: 20px;">No critical vulnerabilities found.</div>`;
    }

    return `
    <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
            <tr style="border-bottom: 1px solid #E5E7EB;">
                <th style="text-align: left; padding: 12px 16px;">CVE</th>
                <th style="text-align: left; padding: 12px 16px;">Package</th>
                <th style="text-align: left; padding: 12px 16px;">Severity</th>
                <th style="text-align: left; padding: 12px 16px;">CVSS Score</th>
            </tr>
        </thead>
        <tbody>
            ${vulnerabilities.map(vuln => {
                const cvssScore = vuln.cvss.cvss3?.base_score || vuln.cvss.cvss2?.base_score;
                return `
                <tr style="border-bottom: 1px solid #E5E7EB;">
                    <td style="padding: 12px 16px;">${vuln.cve}</td>
                    <td style="padding: 12px 16px;">${vuln.package.name} (${vuln.package.version})</td>
                    <td style="padding: 12px 16px; color: ${vuln.severity.toLowerCase() === 'critical' ? '#DC2626' : '#EA580C'};">
                        ${vuln.severity}
                    </td>
                    <td style="padding: 12px 16px;">${cvssScore || 'N/A'}</td>
                </tr>`;
            }).join('')}
        </tbody>
    </table>`;
}

export function generateVulnerabilityAnalysis(summary: GroupSummary): string {
    const metrics = analyzeVulnerabilities(summary);
    
    return `
    <h2 style="color: #1F2937; margin-bottom: 24px;">Vulnerability Analysis</h2>
    ${generateMetricsGrid(metrics)}
    ${generateAffectedPackages(metrics)}
    <h3 style="margin: 30px 0 20px; color: #1F2937;">Critical Vulnerabilities</h3>
    ${generateVulnerabilityTable(summary.criticalVulnerabilities)}`;
}
